# Generated by Django 5.2.3 on 2025-07-07 02:59

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0002_testingoptiondata'),
    ]

    operations = [
        migrations.CreateModel(
            name='ModelTrainingResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_type', models.CharField(choices=[('linear_regression', 'Multiple Linear Regression'), ('neural_network', 'Neural Network')], max_length=20)),
                ('training_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('alpha', models.FloatField(blank=True, null=True)),
                ('lambda_val', models.FloatField(blank=True, null=True)),
                ('num_iters', models.IntegerField(blank=True, null=True)),
                ('epochs', models.IntegerField(blank=True, null=True)),
                ('batch_size', models.IntegerField(blank=True, null=True)),
                ('validation_split', models.FloatField(blank=True, null=True)),
                ('mean_absolute_error', models.FloatField()),
                ('mean_squared_error', models.FloatField()),
                ('root_mean_squared_error', models.FloatField()),
                ('r2_score', models.FloatField()),
                ('mean_absolute_percentage_error', models.FloatField(blank=True, null=True)),
                ('residual_std', models.FloatField()),
                ('max_overprediction', models.FloatField()),
                ('max_underprediction', models.FloatField()),
                ('n_training_samples', models.IntegerField()),
                ('n_test_samples', models.IntegerField()),
                ('training_epochs', models.IntegerField(blank=True, null=True)),
                ('final_training_loss', models.FloatField(blank=True, null=True)),
                ('final_validation_loss', models.FloatField(blank=True, null=True)),
                ('coefficients', models.JSONField(blank=True, null=True)),
                ('feature_names', models.JSONField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-training_date'],
            },
        ),
    ]
